runtime macros/matchit.vim
map <C-m> :NERDTreeToggle<CR>

" automatically rebalance windows on vim resize
autocmd VimResized * :wincmd =

let g:rspec_command = "call VtrSendCommand('bundle exec spring rspec {spec} --format progress')"
map <Leader>t :call RunCurrentSpecFile()<CR>
map <Leader>s :call RunNearestSpec()<CR>
map <Leader>l :call RunLastSpec()<CR>
map <Leader>a :call RunAllSpecs()<CR>
nnoremap <leader>zp :VtrAttachToPane<cr>
" nnoremap <leader>c :VtrSendKeysRaw ^C<cr>
nnoremap <C-c> :VtrSendKeysRaw ^C<cr>
nnoremap <leader>d :VtrSendKeysRaw ^C<cr>
nnoremap <leader>vap :VtrAttachToPane<cr>
" nnoremap <C-a> :VtrSendKeysRaw ^D<cr>
nnoremap <leader>ntf :NERDTreeFind<cr>

nnoremap <leader>fr :VtrFocusRunner<cr>
nnoremap <leader>sf :VtrSendFile<cr>
nnoremap <leader>m :VtrSendCommandToRunner<cr>
nnoremap <leader>eam :VtrSendCommandToRunner docker exec -it ad-machine su app<cr> <bar> :VtrFlushCommand()<cr>
let g:VtrUseVtrMaps = 1

nnoremap <leader>rm :VtrSendCommandToRunner bundle exec rails db:migrate<cr>
nnoremap <leader>ro :VtrSendCommandToRunner bundle exec rails db:rollback<cr>

" zoom a vim pane, <C-w>= to re-balance
nnoremap <leader>- :wincmd _<cr>:wincmd \|<cr>
nnoremap <leader>= :wincmd =<cr>

nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

set splitbelow
set splitright

let g:winresizer_start_key = '<Leader>e'
let g:winresizer_vert_resize = 2
let g:winresizer_horiz_resize = 2

noremap <Leader>w :update<CR>
noremap <Leader>q :quit<CR>

"au VimEnter * RainbowParenthesesToggle
"au Syntax * RainbowParenthesesLoadRound
"au Syntax * RainbowParenthesesLoadSquare
"au Syntax * RainbowParenthesesLoadBraces

map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)

let g:NERDSpaceDelims = 1

nnoremap <C-t>     :tabnew<CR>
syntax on
"color dracula

let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_enter = 0
let g:ale_lint_on_save = 0
noremap <Leader>y :ALELint<CR>

" Repeat last command in the next tmux pane.
" https://ricostacruz.com/til/repeat-tmux-from-vim
nnoremap <Leader>p :call <SID>TmuxRepeat()<CR>

function! s:TmuxRepeat()
  silent! exec "!tmux select-pane -l && tmux send up enter && tmux select-pane -l"
  redraw!
endfunction

set relativenumber

" set background=dark
" set termguicolors
" colorscheme quantum
" 
" If you have vim >=8.0 or Neovim >= 0.1.5
if (has("termguicolors"))
set termguicolors
endif

" For Neovim 0.1.3 and 0.1.4
let $NVIM_TUI_ENABLE_TRUE_COLOR=1

" Theme
" syntax enable
" colorscheme tender
" 
" " set lighline theme inside lightline config
" let g:lightline = { 'colorscheme': 'tender' }
" 
" " set airline theme
" let g:airline_theme = 'tender'


" sonph/onehalf theme
" colorscheme onehalfdark
" let g:airline_theme='onehalfdark'
" let g:lightline = { 'colorscheme': 'onehalfdark' }

colorscheme vim-material
let g:airline_theme='material'

let g:vtr_filetype_runner_overrides = { 'gnuplot': 'gnuplot {file}' }

nnoremap <Leader>its :call I18nTranslateString()<CR>
nnoremap <Leader>idt :call I18nDisplayTranslation()<CR>
